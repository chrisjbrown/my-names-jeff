const e="my-names-jeff",n=["Human","Dragon","Dwarf","Elf","Gnome","Goblin","Halfling","Orc","Tiefling"];loadTemplates(["../templates/token-config.hbs","../templates/token-types.hbs"]);let a=!1;async function getTableFromPack(e){const n=game.packs.get("my-names-jeff.person-names"),a=Array.from(n.index).find((n=>n.name==e));return await n.getDocument(a?._id)}async function renderNameTypes(e,t){if(a)return e.find(".my-names-jeff.token-names-wrap")?.remove(),void(a=!1);a=!0;const o=await renderTemplate("modules/my-names-jeff/templates/token-types.hbs",{types:n});e.find(".col.left")?.append(o);e.find(".my-names-jeff.token-names-wrap").find("button").on("click",(async e=>{await async function setName(e,n){if(n)if("Dragon"===e)try{const e=await getTableFromPack("Dragon Name"),a=await e.roll();n.document.update({name:`${a.results[0].text}`})}catch(e){console.error("my-names-jeff","Error getting Dragon name")}else try{const[a,t]=await Promise.all([getTableFromPack(`${e} First Name`),getTableFromPack(`${e} Last Name`)]),[o,r]=await Promise.all([a.roll(),t.roll()]);n.document.update({name:`${o.results[0].text} ${r.results[0].text}`})}catch(n){console.error("my-names-jeff",`Error getting ${e} name`)}else console.error("my-names-jeff","Token not found")}(e.target.value,t),a=!1}))}Hooks.once("init",(()=>{console.log(`Initializing ${e}`)})),Hooks.on("renderTokenHUD",((e,n)=>{if(!game.user.isGM||e.object.document.actorLink)return;const a=e.object;n[0].querySelector('.control-icon[data-action="config"]').insertAdjacentHTML("beforebegin",'\n      <div class="control-icon" data-action="token-name">\n        <i class="fas fa-person"></i>\n      </div>\n    ');n.find('.control-icon[data-action="token-name"]').on("click",(async e=>{e.preventDefault(),renderNameTypes(n,a)}))}));export{e as moduleId,n as tokenTypes};
//# sourceMappingURL=my-names-jeff.min.js.map
